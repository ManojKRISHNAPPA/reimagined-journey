pipeline {
  agent any

  parameters {
    // string(name: 'NEW_USER', defaultValue: 'newuser', description: 'IAM user to add or remove')
    choice(name: 'terraformAction', choices: ['apply', 'destroy'], description: 'Choose Terraform action: apply (create user) or destroy (delete user)')
  }

  environment {
    AWS_ACCESS_KEY_ID     = credentials('AWS_ACCESS_KEY_ID')
    AWS_SECRET_ACCESS_KEY = credentials('AWS_SECRET_ACCESS_KEY')
  }

  stages {
    stage('Checkout Terraform Repo') {
      steps {
        dir('project-2') {
          git branch: 'terraform', url: 'https://github.com/ManojKRISHNAPPA/reimagined-journey.git'
        }
      }
    }

    stage('Initialize Terraform') {
      steps {
        dir('project-2') {
          sh 'terraform init'
        }
      }
    }

    stage('Update users.txt and terraform.tfvars') {
      steps {
        dir('project-2') {
          script {
            if (params.terraformAction == 'apply') {
              echo "Adding user: ${params.NEW_USER}"
              sh '''
                # Create users.txt if missing
                touch users.txt
                
                # Add user if not present
                if ! grep -qx "${NEW_USER}" users.txt; then
                  echo "${NEW_USER}" >> users.txt
                fi
                
                # Generate terraform.tfvars from users.txt
                echo -n 'iam_users = [' > terraform.tfvars
                awk '{printf "\\"%s\\",", $0}' users.txt >> terraform.tfvars
                sed -i '$ s/,$/]/' terraform.tfvars
              '''
            } else if (params.terraformAction == 'destroy') {
              echo "Removing user: ${params.NEW_USER}"
              sh '''
                # Remove user from users.txt
                if [ -f users.txt ]; then
                  grep -vx "${NEW_USER}" users.txt > users.tmp || true
                  mv users.tmp users.txt
                fi
                
                # Generate terraform.tfvars from users.txt
                echo -n 'iam_users = [' > terraform.tfvars
                awk '{printf "\\"%s\\",", $0}' users.txt >> terraform.tfvars
                sed -i '$ s/,$/]/' terraform.tfvars
              '''
            }
          }
        }
      }
    }

    stage('Terraform Apply') {
      steps {
        dir('project-2') {
          sh 'terraform apply -auto-approve'
        }
      }
    }
  }
}
